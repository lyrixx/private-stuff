const cacheVersion = '{{ "now"|date("c") }}';
const filesToCache = {{
    [
    '/',
    '/files',
    '/recovery-codes',
    '/manifest.json',
    '/favicon.ico',
] | merge(
    files | map(file => "./upload/#{file.path}")
) | json_encode | raw }};

self.addEventListener('install', (event) => {
    // Drop all previous caches
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== cacheVersion) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );

    event.waitUntil(
        caches.open(cacheVersion).then((cache) => {
            return cache.addAll(filesToCache);
        })
    );
});

self.addEventListener("fetch", (event) => {
    event.respondWith(
        caches.match(event.request).then((response) => {
            if (response !== undefined) {
                return response;
            }

            return fetch(event.request)
                .then((response) => {
                    // response may be used only once
                    // we need to save clone to put one copy in cache
                    // and serve second one
                    let responseClone = response.clone();

                    caches.open(cacheVersion).then((cache) => {
                        cache.put(event.request, responseClone);
                    });

                    return response;
                })
            ;
        }),
    );
});
